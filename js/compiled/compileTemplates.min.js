(function(a) {
    function b() {}
    for (var c = "assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn".split(","), d; !!(d = c.pop()); ) {
        a[d] = a[d] || b;
    }
})(function() {
    try {
        console.log();
        return window.console;
    } catch (a) {
        return window.console = {};
    }
}());

this.Handlebars = {};

(function(a) {
    a.VERSION = "1.0.rc.1";
    a.helpers = {};
    a.partials = {};
    a.registerHelper = function(a, b, c) {
        if (c) {
            b.not = c;
        }
        this.helpers[a] = b;
    };
    a.registerPartial = function(a, b) {
        this.partials[a] = b;
    };
    a.registerHelper("helperMissing", function(a) {
        if (arguments.length === 2) {
            return undefined;
        } else {
            throw new Error("Could not find property '" + a + "'");
        }
    });
    var b = Object.prototype.toString, c = "[object Function]";
    a.registerHelper("blockHelperMissing", function(d, e) {
        var f = e.inverse || function() {}, g = e.fn;
        var h = "";
        var i = b.call(d);
        if (i === c) {
            d = d.call(this);
        }
        if (d === true) {
            return g(this);
        } else if (d === false || d == null) {
            return f(this);
        } else if (i === "[object Array]") {
            if (d.length > 0) {
                return a.helpers.each(d, e);
            } else {
                return f(this);
            }
        } else {
            return g(d);
        }
    });
    a.K = function() {};
    a.createFrame = Object.create || function(b) {
        a.K.prototype = b;
        var c = new a.K();
        a.K.prototype = null;
        return c;
    };
    a.registerHelper("each", function(b, c) {
        var d = c.fn, e = c.inverse;
        var f = "", g;
        if (c.data) {
            g = a.createFrame(c.data);
        }
        if (b && b.length > 0) {
            for (var h = 0, i = b.length; h < i; h++) {
                if (g) {
                    g.index = h;
                }
                f = f + d(b[h], {
                    data: g
                });
            }
        } else {
            f = e(this);
        }
        return f;
    });
    a.registerHelper("if", function(d, e) {
        var f = b.call(d);
        if (f === c) {
            d = d.call(this);
        }
        if (!d || a.Utils.isEmpty(d)) {
            return e.inverse(this);
        } else {
            return e.fn(this);
        }
    });
    a.registerHelper("unless", function(b, c) {
        var d = c.fn, e = c.inverse;
        c.fn = e;
        c.inverse = d;
        return a.helpers["if"].call(this, b, c);
    });
    a.registerHelper("with", function(a, b) {
        return b.fn(a);
    });
    a.registerHelper("log", function(b) {
        a.log(b);
    });
})(this.Handlebars);

var handlebars = function() {
    var a = {
        trace: function d() {},
        yy: {},
        symbols_: {
            error: 2,
            root: 3,
            program: 4,
            EOF: 5,
            statements: 6,
            simpleInverse: 7,
            statement: 8,
            openInverse: 9,
            closeBlock: 10,
            openBlock: 11,
            mustache: 12,
            partial: 13,
            CONTENT: 14,
            COMMENT: 15,
            OPEN_BLOCK: 16,
            inMustache: 17,
            CLOSE: 18,
            OPEN_INVERSE: 19,
            OPEN_ENDBLOCK: 20,
            path: 21,
            OPEN: 22,
            OPEN_UNESCAPED: 23,
            OPEN_PARTIAL: 24,
            params: 25,
            hash: 26,
            DATA: 27,
            param: 28,
            STRING: 29,
            INTEGER: 30,
            BOOLEAN: 31,
            hashSegments: 32,
            hashSegment: 33,
            ID: 34,
            EQUALS: 35,
            pathSegments: 36,
            SEP: 37,
            $accept: 0,
            $end: 1
        },
        terminals_: {
            2: "error",
            5: "EOF",
            14: "CONTENT",
            15: "COMMENT",
            16: "OPEN_BLOCK",
            18: "CLOSE",
            19: "OPEN_INVERSE",
            20: "OPEN_ENDBLOCK",
            22: "OPEN",
            23: "OPEN_UNESCAPED",
            24: "OPEN_PARTIAL",
            27: "DATA",
            29: "STRING",
            30: "INTEGER",
            31: "BOOLEAN",
            34: "ID",
            35: "EQUALS",
            37: "SEP"
        },
        productions_: [ 0, [ 3, 2 ], [ 4, 3 ], [ 4, 1 ], [ 4, 0 ], [ 6, 1 ], [ 6, 2 ], [ 8, 3 ], [ 8, 3 ], [ 8, 1 ], [ 8, 1 ], [ 8, 1 ], [ 8, 1 ], [ 11, 3 ], [ 9, 3 ], [ 10, 3 ], [ 12, 3 ], [ 12, 3 ], [ 13, 3 ], [ 13, 4 ], [ 7, 2 ], [ 17, 3 ], [ 17, 2 ], [ 17, 2 ], [ 17, 1 ], [ 17, 1 ], [ 25, 2 ], [ 25, 1 ], [ 28, 1 ], [ 28, 1 ], [ 28, 1 ], [ 28, 1 ], [ 28, 1 ], [ 26, 1 ], [ 32, 2 ], [ 32, 1 ], [ 33, 3 ], [ 33, 3 ], [ 33, 3 ], [ 33, 3 ], [ 33, 3 ], [ 21, 1 ], [ 36, 3 ], [ 36, 1 ] ],
        performAction: function e(a, b, c, d, f, g, h) {
            var i = g.length - 1;
            switch (f) {
              case 1:
                return g[i - 1];
                break;

              case 2:
                this.$ = new d.ProgramNode(g[i - 2], g[i]);
                break;

              case 3:
                this.$ = new d.ProgramNode(g[i]);
                break;

              case 4:
                this.$ = new d.ProgramNode([]);
                break;

              case 5:
                this.$ = [ g[i] ];
                break;

              case 6:
                g[i - 1].push(g[i]);
                this.$ = g[i - 1];
                break;

              case 7:
                this.$ = new d.BlockNode(g[i - 2], g[i - 1].inverse, g[i - 1], g[i]);
                break;

              case 8:
                this.$ = new d.BlockNode(g[i - 2], g[i - 1], g[i - 1].inverse, g[i]);
                break;

              case 9:
                this.$ = g[i];
                break;

              case 10:
                this.$ = g[i];
                break;

              case 11:
                this.$ = new d.ContentNode(g[i]);
                break;

              case 12:
                this.$ = new d.CommentNode(g[i]);
                break;

              case 13:
                this.$ = new d.MustacheNode(g[i - 1][0], g[i - 1][1]);
                break;

              case 14:
                this.$ = new d.MustacheNode(g[i - 1][0], g[i - 1][1]);
                break;

              case 15:
                this.$ = g[i - 1];
                break;

              case 16:
                this.$ = new d.MustacheNode(g[i - 1][0], g[i - 1][1]);
                break;

              case 17:
                this.$ = new d.MustacheNode(g[i - 1][0], g[i - 1][1], true);
                break;

              case 18:
                this.$ = new d.PartialNode(g[i - 1]);
                break;

              case 19:
                this.$ = new d.PartialNode(g[i - 2], g[i - 1]);
                break;

              case 20:
                break;

              case 21:
                this.$ = [ [ g[i - 2] ].concat(g[i - 1]), g[i] ];
                break;

              case 22:
                this.$ = [ [ g[i - 1] ].concat(g[i]), null ];
                break;

              case 23:
                this.$ = [ [ g[i - 1] ], g[i] ];
                break;

              case 24:
                this.$ = [ [ g[i] ], null ];
                break;

              case 25:
                this.$ = [ [ new d.DataNode(g[i]) ], null ];
                break;

              case 26:
                g[i - 1].push(g[i]);
                this.$ = g[i - 1];
                break;

              case 27:
                this.$ = [ g[i] ];
                break;

              case 28:
                this.$ = g[i];
                break;

              case 29:
                this.$ = new d.StringNode(g[i]);
                break;

              case 30:
                this.$ = new d.IntegerNode(g[i]);
                break;

              case 31:
                this.$ = new d.BooleanNode(g[i]);
                break;

              case 32:
                this.$ = new d.DataNode(g[i]);
                break;

              case 33:
                this.$ = new d.HashNode(g[i]);
                break;

              case 34:
                g[i - 1].push(g[i]);
                this.$ = g[i - 1];
                break;

              case 35:
                this.$ = [ g[i] ];
                break;

              case 36:
                this.$ = [ g[i - 2], g[i] ];
                break;

              case 37:
                this.$ = [ g[i - 2], new d.StringNode(g[i]) ];
                break;

              case 38:
                this.$ = [ g[i - 2], new d.IntegerNode(g[i]) ];
                break;

              case 39:
                this.$ = [ g[i - 2], new d.BooleanNode(g[i]) ];
                break;

              case 40:
                this.$ = [ g[i - 2], new d.DataNode(g[i]) ];
                break;

              case 41:
                this.$ = new d.IdNode(g[i]);
                break;

              case 42:
                g[i - 2].push(g[i]);
                this.$ = g[i - 2];
                break;

              case 43:
                this.$ = [ g[i] ];
                break;
            }
        },
        table: [ {
            3: 1,
            4: 2,
            5: [ 2, 4 ],
            6: 3,
            8: 4,
            9: 5,
            11: 6,
            12: 7,
            13: 8,
            14: [ 1, 9 ],
            15: [ 1, 10 ],
            16: [ 1, 12 ],
            19: [ 1, 11 ],
            22: [ 1, 13 ],
            23: [ 1, 14 ],
            24: [ 1, 15 ]
        }, {
            1: [ 3 ]
        }, {
            5: [ 1, 16 ]
        }, {
            5: [ 2, 3 ],
            7: 17,
            8: 18,
            9: 5,
            11: 6,
            12: 7,
            13: 8,
            14: [ 1, 9 ],
            15: [ 1, 10 ],
            16: [ 1, 12 ],
            19: [ 1, 19 ],
            20: [ 2, 3 ],
            22: [ 1, 13 ],
            23: [ 1, 14 ],
            24: [ 1, 15 ]
        }, {
            5: [ 2, 5 ],
            14: [ 2, 5 ],
            15: [ 2, 5 ],
            16: [ 2, 5 ],
            19: [ 2, 5 ],
            20: [ 2, 5 ],
            22: [ 2, 5 ],
            23: [ 2, 5 ],
            24: [ 2, 5 ]
        }, {
            4: 20,
            6: 3,
            8: 4,
            9: 5,
            11: 6,
            12: 7,
            13: 8,
            14: [ 1, 9 ],
            15: [ 1, 10 ],
            16: [ 1, 12 ],
            19: [ 1, 11 ],
            20: [ 2, 4 ],
            22: [ 1, 13 ],
            23: [ 1, 14 ],
            24: [ 1, 15 ]
        }, {
            4: 21,
            6: 3,
            8: 4,
            9: 5,
            11: 6,
            12: 7,
            13: 8,
            14: [ 1, 9 ],
            15: [ 1, 10 ],
            16: [ 1, 12 ],
            19: [ 1, 11 ],
            20: [ 2, 4 ],
            22: [ 1, 13 ],
            23: [ 1, 14 ],
            24: [ 1, 15 ]
        }, {
            5: [ 2, 9 ],
            14: [ 2, 9 ],
            15: [ 2, 9 ],
            16: [ 2, 9 ],
            19: [ 2, 9 ],
            20: [ 2, 9 ],
            22: [ 2, 9 ],
            23: [ 2, 9 ],
            24: [ 2, 9 ]
        }, {
            5: [ 2, 10 ],
            14: [ 2, 10 ],
            15: [ 2, 10 ],
            16: [ 2, 10 ],
            19: [ 2, 10 ],
            20: [ 2, 10 ],
            22: [ 2, 10 ],
            23: [ 2, 10 ],
            24: [ 2, 10 ]
        }, {
            5: [ 2, 11 ],
            14: [ 2, 11 ],
            15: [ 2, 11 ],
            16: [ 2, 11 ],
            19: [ 2, 11 ],
            20: [ 2, 11 ],
            22: [ 2, 11 ],
            23: [ 2, 11 ],
            24: [ 2, 11 ]
        }, {
            5: [ 2, 12 ],
            14: [ 2, 12 ],
            15: [ 2, 12 ],
            16: [ 2, 12 ],
            19: [ 2, 12 ],
            20: [ 2, 12 ],
            22: [ 2, 12 ],
            23: [ 2, 12 ],
            24: [ 2, 12 ]
        }, {
            17: 22,
            21: 23,
            27: [ 1, 24 ],
            34: [ 1, 26 ],
            36: 25
        }, {
            17: 27,
            21: 23,
            27: [ 1, 24 ],
            34: [ 1, 26 ],
            36: 25
        }, {
            17: 28,
            21: 23,
            27: [ 1, 24 ],
            34: [ 1, 26 ],
            36: 25
        }, {
            17: 29,
            21: 23,
            27: [ 1, 24 ],
            34: [ 1, 26 ],
            36: 25
        }, {
            21: 30,
            34: [ 1, 26 ],
            36: 25
        }, {
            1: [ 2, 1 ]
        }, {
            6: 31,
            8: 4,
            9: 5,
            11: 6,
            12: 7,
            13: 8,
            14: [ 1, 9 ],
            15: [ 1, 10 ],
            16: [ 1, 12 ],
            19: [ 1, 11 ],
            22: [ 1, 13 ],
            23: [ 1, 14 ],
            24: [ 1, 15 ]
        }, {
            5: [ 2, 6 ],
            14: [ 2, 6 ],
            15: [ 2, 6 ],
            16: [ 2, 6 ],
            19: [ 2, 6 ],
            20: [ 2, 6 ],
            22: [ 2, 6 ],
            23: [ 2, 6 ],
            24: [ 2, 6 ]
        }, {
            17: 22,
            18: [ 1, 32 ],
            21: 23,
            27: [ 1, 24 ],
            34: [ 1, 26 ],
            36: 25
        }, {
            10: 33,
            20: [ 1, 34 ]
        }, {
            10: 35,
            20: [ 1, 34 ]
        }, {
            18: [ 1, 36 ]
        }, {
            18: [ 2, 24 ],
            21: 41,
            25: 37,
            26: 38,
            27: [ 1, 45 ],
            28: 39,
            29: [ 1, 42 ],
            30: [ 1, 43 ],
            31: [ 1, 44 ],
            32: 40,
            33: 46,
            34: [ 1, 47 ],
            36: 25
        }, {
            18: [ 2, 25 ]
        }, {
            18: [ 2, 41 ],
            27: [ 2, 41 ],
            29: [ 2, 41 ],
            30: [ 2, 41 ],
            31: [ 2, 41 ],
            34: [ 2, 41 ],
            37: [ 1, 48 ]
        }, {
            18: [ 2, 43 ],
            27: [ 2, 43 ],
            29: [ 2, 43 ],
            30: [ 2, 43 ],
            31: [ 2, 43 ],
            34: [ 2, 43 ],
            37: [ 2, 43 ]
        }, {
            18: [ 1, 49 ]
        }, {
            18: [ 1, 50 ]
        }, {
            18: [ 1, 51 ]
        }, {
            18: [ 1, 52 ],
            21: 53,
            34: [ 1, 26 ],
            36: 25
        }, {
            5: [ 2, 2 ],
            8: 18,
            9: 5,
            11: 6,
            12: 7,
            13: 8,
            14: [ 1, 9 ],
            15: [ 1, 10 ],
            16: [ 1, 12 ],
            19: [ 1, 11 ],
            20: [ 2, 2 ],
            22: [ 1, 13 ],
            23: [ 1, 14 ],
            24: [ 1, 15 ]
        }, {
            14: [ 2, 20 ],
            15: [ 2, 20 ],
            16: [ 2, 20 ],
            19: [ 2, 20 ],
            22: [ 2, 20 ],
            23: [ 2, 20 ],
            24: [ 2, 20 ]
        }, {
            5: [ 2, 7 ],
            14: [ 2, 7 ],
            15: [ 2, 7 ],
            16: [ 2, 7 ],
            19: [ 2, 7 ],
            20: [ 2, 7 ],
            22: [ 2, 7 ],
            23: [ 2, 7 ],
            24: [ 2, 7 ]
        }, {
            21: 54,
            34: [ 1, 26 ],
            36: 25
        }, {
            5: [ 2, 8 ],
            14: [ 2, 8 ],
            15: [ 2, 8 ],
            16: [ 2, 8 ],
            19: [ 2, 8 ],
            20: [ 2, 8 ],
            22: [ 2, 8 ],
            23: [ 2, 8 ],
            24: [ 2, 8 ]
        }, {
            14: [ 2, 14 ],
            15: [ 2, 14 ],
            16: [ 2, 14 ],
            19: [ 2, 14 ],
            20: [ 2, 14 ],
            22: [ 2, 14 ],
            23: [ 2, 14 ],
            24: [ 2, 14 ]
        }, {
            18: [ 2, 22 ],
            21: 41,
            26: 55,
            27: [ 1, 45 ],
            28: 56,
            29: [ 1, 42 ],
            30: [ 1, 43 ],
            31: [ 1, 44 ],
            32: 40,
            33: 46,
            34: [ 1, 47 ],
            36: 25
        }, {
            18: [ 2, 23 ]
        }, {
            18: [ 2, 27 ],
            27: [ 2, 27 ],
            29: [ 2, 27 ],
            30: [ 2, 27 ],
            31: [ 2, 27 ],
            34: [ 2, 27 ]
        }, {
            18: [ 2, 33 ],
            33: 57,
            34: [ 1, 58 ]
        }, {
            18: [ 2, 28 ],
            27: [ 2, 28 ],
            29: [ 2, 28 ],
            30: [ 2, 28 ],
            31: [ 2, 28 ],
            34: [ 2, 28 ]
        }, {
            18: [ 2, 29 ],
            27: [ 2, 29 ],
            29: [ 2, 29 ],
            30: [ 2, 29 ],
            31: [ 2, 29 ],
            34: [ 2, 29 ]
        }, {
            18: [ 2, 30 ],
            27: [ 2, 30 ],
            29: [ 2, 30 ],
            30: [ 2, 30 ],
            31: [ 2, 30 ],
            34: [ 2, 30 ]
        }, {
            18: [ 2, 31 ],
            27: [ 2, 31 ],
            29: [ 2, 31 ],
            30: [ 2, 31 ],
            31: [ 2, 31 ],
            34: [ 2, 31 ]
        }, {
            18: [ 2, 32 ],
            27: [ 2, 32 ],
            29: [ 2, 32 ],
            30: [ 2, 32 ],
            31: [ 2, 32 ],
            34: [ 2, 32 ]
        }, {
            18: [ 2, 35 ],
            34: [ 2, 35 ]
        }, {
            18: [ 2, 43 ],
            27: [ 2, 43 ],
            29: [ 2, 43 ],
            30: [ 2, 43 ],
            31: [ 2, 43 ],
            34: [ 2, 43 ],
            35: [ 1, 59 ],
            37: [ 2, 43 ]
        }, {
            34: [ 1, 60 ]
        }, {
            14: [ 2, 13 ],
            15: [ 2, 13 ],
            16: [ 2, 13 ],
            19: [ 2, 13 ],
            20: [ 2, 13 ],
            22: [ 2, 13 ],
            23: [ 2, 13 ],
            24: [ 2, 13 ]
        }, {
            5: [ 2, 16 ],
            14: [ 2, 16 ],
            15: [ 2, 16 ],
            16: [ 2, 16 ],
            19: [ 2, 16 ],
            20: [ 2, 16 ],
            22: [ 2, 16 ],
            23: [ 2, 16 ],
            24: [ 2, 16 ]
        }, {
            5: [ 2, 17 ],
            14: [ 2, 17 ],
            15: [ 2, 17 ],
            16: [ 2, 17 ],
            19: [ 2, 17 ],
            20: [ 2, 17 ],
            22: [ 2, 17 ],
            23: [ 2, 17 ],
            24: [ 2, 17 ]
        }, {
            5: [ 2, 18 ],
            14: [ 2, 18 ],
            15: [ 2, 18 ],
            16: [ 2, 18 ],
            19: [ 2, 18 ],
            20: [ 2, 18 ],
            22: [ 2, 18 ],
            23: [ 2, 18 ],
            24: [ 2, 18 ]
        }, {
            18: [ 1, 61 ]
        }, {
            18: [ 1, 62 ]
        }, {
            18: [ 2, 21 ]
        }, {
            18: [ 2, 26 ],
            27: [ 2, 26 ],
            29: [ 2, 26 ],
            30: [ 2, 26 ],
            31: [ 2, 26 ],
            34: [ 2, 26 ]
        }, {
            18: [ 2, 34 ],
            34: [ 2, 34 ]
        }, {
            35: [ 1, 59 ]
        }, {
            21: 63,
            27: [ 1, 67 ],
            29: [ 1, 64 ],
            30: [ 1, 65 ],
            31: [ 1, 66 ],
            34: [ 1, 26 ],
            36: 25
        }, {
            18: [ 2, 42 ],
            27: [ 2, 42 ],
            29: [ 2, 42 ],
            30: [ 2, 42 ],
            31: [ 2, 42 ],
            34: [ 2, 42 ],
            37: [ 2, 42 ]
        }, {
            5: [ 2, 19 ],
            14: [ 2, 19 ],
            15: [ 2, 19 ],
            16: [ 2, 19 ],
            19: [ 2, 19 ],
            20: [ 2, 19 ],
            22: [ 2, 19 ],
            23: [ 2, 19 ],
            24: [ 2, 19 ]
        }, {
            5: [ 2, 15 ],
            14: [ 2, 15 ],
            15: [ 2, 15 ],
            16: [ 2, 15 ],
            19: [ 2, 15 ],
            20: [ 2, 15 ],
            22: [ 2, 15 ],
            23: [ 2, 15 ],
            24: [ 2, 15 ]
        }, {
            18: [ 2, 36 ],
            34: [ 2, 36 ]
        }, {
            18: [ 2, 37 ],
            34: [ 2, 37 ]
        }, {
            18: [ 2, 38 ],
            34: [ 2, 38 ]
        }, {
            18: [ 2, 39 ],
            34: [ 2, 39 ]
        }, {
            18: [ 2, 40 ],
            34: [ 2, 40 ]
        } ],
        defaultActions: {
            16: [ 2, 1 ],
            24: [ 2, 25 ],
            38: [ 2, 23 ],
            55: [ 2, 21 ]
        },
        parseError: function f(a, b) {
            throw new Error(a);
        },
        parse: function g(a) {
            var b = this, c = [ 0 ], d = [ null ], e = [], f = this.table, g = "", h = 0, i = 0, j = 0, k = 2, l = 1;
            this.lexer.setInput(a);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
            var m = this.lexer.yylloc;
            e.push(m);
            var n = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
            function o(a) {
                c.length = c.length - 2 * a;
                d.length = d.length - a;
                e.length = e.length - a;
            }
            function p() {
                var a;
                a = b.lexer.lex() || 1;
                if (typeof a !== "number") {
                    a = b.symbols_[a] || a;
                }
                return a;
            }
            var q, r, s, t, u, v, w = {}, x, y, z, A;
            while (true) {
                s = c[c.length - 1];
                if (this.defaultActions[s]) {
                    t = this.defaultActions[s];
                } else {
                    if (q === null || typeof q == "undefined") {
                        q = p();
                    }
                    t = f[s] && f[s][q];
                }
                if (typeof t === "undefined" || !t.length || !t[0]) {
                    var B = "";
                    if (!j) {
                        A = [];
                        for (x in f[s]) if (this.terminals_[x] && x > 2) {
                            A.push("'" + this.terminals_[x] + "'");
                        }
                        if (this.lexer.showPosition) {
                            B = "Parse error on line " + (h + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + A.join(", ") + ", got '" + (this.terminals_[q] || q) + "'";
                        } else {
                            B = "Parse error on line " + (h + 1) + ": Unexpected " + (q == 1 ? "end of input" : "'" + (this.terminals_[q] || q) + "'");
                        }
                        this.parseError(B, {
                            text: this.lexer.match,
                            token: this.terminals_[q] || q,
                            line: this.lexer.yylineno,
                            loc: m,
                            expected: A
                        });
                    }
                }
                if (t[0] instanceof Array && t.length > 1) {
                    throw new Error("Parse Error: multiple actions possible at state: " + s + ", token: " + q);
                }
                switch (t[0]) {
                  case 1:
                    c.push(q);
                    d.push(this.lexer.yytext);
                    e.push(this.lexer.yylloc);
                    c.push(t[1]);
                    q = null;
                    if (!r) {
                        i = this.lexer.yyleng;
                        g = this.lexer.yytext;
                        h = this.lexer.yylineno;
                        m = this.lexer.yylloc;
                        if (j > 0) j--;
                    } else {
                        q = r;
                        r = null;
                    }
                    break;

                  case 2:
                    y = this.productions_[t[1]][1];
                    w.$ = d[d.length - y];
                    w._$ = {
                        first_line: e[e.length - (y || 1)].first_line,
                        last_line: e[e.length - 1].last_line,
                        first_column: e[e.length - (y || 1)].first_column,
                        last_column: e[e.length - 1].last_column
                    };
                    if (n) {
                        w._$.range = [ e[e.length - (y || 1)].range[0], e[e.length - 1].range[1] ];
                    }
                    v = this.performAction.call(w, g, i, h, this.yy, t[1], d, e);
                    if (typeof v !== "undefined") {
                        return v;
                    }
                    if (y) {
                        c = c.slice(0, -1 * y * 2);
                        d = d.slice(0, -1 * y);
                        e = e.slice(0, -1 * y);
                    }
                    c.push(this.productions_[t[1]][0]);
                    d.push(w.$);
                    e.push(w._$);
                    z = f[c[c.length - 2]][c[c.length - 1]];
                    c.push(z);
                    break;

                  case 3:
                    return true;
                }
            }
            return true;
        }
    };
    var b = function() {
        var a = {
            EOF: 1,
            parseError: function b(a, c) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(a, c);
                } else {
                    throw new Error(a);
                }
            },
            setInput: function(a) {
                this._input = a;
                this._more = this._less = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = "";
                this.conditionStack = [ "INITIAL" ];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) this.yylloc.range = [ 0, 0 ];
                this.offset = 0;
                return this;
            },
            input: function() {
                var a = this._input[0];
                this.yytext += a;
                this.yyleng++;
                this.offset++;
                this.match += a;
                this.matched += a;
                var b = a.match(/(?:\r\n?|\n).*/g);
                if (b) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) this.yylloc.range[1]++;
                this._input = this._input.slice(1);
                return a;
            },
            unput: function(a) {
                var b = a.length;
                var c = a.split(/(?:\r\n?|\n)/g);
                this._input = a + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - b - 1);
                this.offset -= b;
                var d = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);
                if (c.length - 1) this.yylineno -= c.length - 1;
                var e = this.yylloc.range;
                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: c ? (c.length === d.length ? this.yylloc.first_column : 0) + d[d.length - c.length].length - c[0].length : this.yylloc.first_column - b
                };
                if (this.options.ranges) {
                    this.yylloc.range = [ e[0], e[0] + this.yyleng - b ];
                }
                return this;
            },
            more: function() {
                this._more = true;
                return this;
            },
            less: function(a) {
                this.unput(this.match.slice(a));
            },
            pastInput: function() {
                var a = this.matched.substr(0, this.matched.length - this.match.length);
                return (a.length > 20 ? "..." : "") + a.substr(-20).replace(/\n/g, "");
            },
            upcomingInput: function() {
                var a = this.match;
                if (a.length < 20) {
                    a += this._input.substr(0, 20 - a.length);
                }
                return (a.substr(0, 20) + (a.length > 20 ? "..." : "")).replace(/\n/g, "");
            },
            showPosition: function() {
                var a = this.pastInput();
                var b = new Array(a.length + 1).join("-");
                return a + this.upcomingInput() + "\n" + b + "^";
            },
            next: function() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) this.done = true;
                var a, b, c, d, e, f;
                if (!this._more) {
                    this.yytext = "";
                    this.match = "";
                }
                var g = this._currentRules();
                for (var h = 0; h < g.length; h++) {
                    c = this._input.match(this.rules[g[h]]);
                    if (c && (!b || c[0].length > b[0].length)) {
                        b = c;
                        d = h;
                        if (!this.options.flex) break;
                    }
                }
                if (b) {
                    f = b[0].match(/(?:\r\n?|\n).*/g);
                    if (f) this.yylineno += f.length;
                    this.yylloc = {
                        first_line: this.yylloc.last_line,
                        last_line: this.yylineno + 1,
                        first_column: this.yylloc.last_column,
                        last_column: f ? f[f.length - 1].length - f[f.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + b[0].length
                    };
                    this.yytext += b[0];
                    this.match += b[0];
                    this.matches = b;
                    this.yyleng = this.yytext.length;
                    if (this.options.ranges) {
                        this.yylloc.range = [ this.offset, this.offset += this.yyleng ];
                    }
                    this._more = false;
                    this._input = this._input.slice(b[0].length);
                    this.matched += b[0];
                    a = this.performAction.call(this, this.yy, this, g[d], this.conditionStack[this.conditionStack.length - 1]);
                    if (this.done && this._input) this.done = false;
                    if (a) return a; else return;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },
            lex: function c() {
                var a = this.next();
                if (typeof a !== "undefined") {
                    return a;
                } else {
                    return this.lex();
                }
            },
            begin: function d(a) {
                this.conditionStack.push(a);
            },
            popState: function e() {
                return this.conditionStack.pop();
            },
            _currentRules: function f() {
                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
            },
            topState: function() {
                return this.conditionStack[this.conditionStack.length - 2];
            },
            pushState: function g(a) {
                this.begin(a);
            }
        };
        a.options = {};
        a.performAction = function h(a, b, c, d) {
            var e = d;
            switch (c) {
              case 0:
                if (b.yytext.slice(-1) !== "\\") this.begin("mu");
                if (b.yytext.slice(-1) === "\\") b.yytext = b.yytext.substr(0, b.yyleng - 1), this.begin("emu");
                if (b.yytext) return 14;
                break;

              case 1:
                return 14;
                break;

              case 2:
                if (b.yytext.slice(-1) !== "\\") this.popState();
                if (b.yytext.slice(-1) === "\\") b.yytext = b.yytext.substr(0, b.yyleng - 1);
                return 14;
                break;

              case 3:
                return 24;
                break;

              case 4:
                return 16;
                break;

              case 5:
                return 20;
                break;

              case 6:
                return 19;
                break;

              case 7:
                return 19;
                break;

              case 8:
                return 23;
                break;

              case 9:
                return 23;
                break;

              case 10:
                b.yytext = b.yytext.substr(3, b.yyleng - 5);
                this.popState();
                return 15;
                break;

              case 11:
                return 22;
                break;

              case 12:
                return 35;
                break;

              case 13:
                return 34;
                break;

              case 14:
                return 34;
                break;

              case 15:
                return 37;
                break;

              case 16:
                break;

              case 17:
                this.popState();
                return 18;
                break;

              case 18:
                this.popState();
                return 18;
                break;

              case 19:
                b.yytext = b.yytext.substr(1, b.yyleng - 2).replace(/\\"/g, '"');
                return 29;
                break;

              case 20:
                b.yytext = b.yytext.substr(1, b.yyleng - 2).replace(/\\"/g, '"');
                return 29;
                break;

              case 21:
                b.yytext = b.yytext.substr(1);
                return 27;
                break;

              case 22:
                return 31;
                break;

              case 23:
                return 31;
                break;

              case 24:
                return 30;
                break;

              case 25:
                return 34;
                break;

              case 26:
                b.yytext = b.yytext.substr(1, b.yyleng - 2);
                return 34;
                break;

              case 27:
                return "INVALID";
                break;

              case 28:
                return 5;
                break;
            }
        };
        a.rules = [ /^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|$)))/, /^(?:\{\{>)/, /^(?:\{\{#)/, /^(?:\{\{\/)/, /^(?:\{\{\^)/, /^(?:\{\{\s*else\b)/, /^(?:\{\{\{)/, /^(?:\{\{&)/, /^(?:\{\{![\s\S]*?\}\})/, /^(?:\{\{)/, /^(?:=)/, /^(?:\.(?=[} ]))/, /^(?:\.\.)/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}\}\})/, /^(?:\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@[a-zA-Z]+)/, /^(?:true(?=[}\s]))/, /^(?:false(?=[}\s]))/, /^(?:[0-9]+(?=[}\s]))/, /^(?:[a-zA-Z0-9_$-]+(?=[=}\s\/.]))/, /^(?:\[[^\]]*\])/, /^(?:.)/, /^(?:$)/ ];
        a.conditions = {
            mu: {
                rules: [ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 ],
                inclusive: false
            },
            emu: {
                rules: [ 2 ],
                inclusive: false
            },
            INITIAL: {
                rules: [ 0, 1, 28 ],
                inclusive: true
            }
        };
        return a;
    }();
    a.lexer = b;
    function c() {
        this.yy = {};
    }
    c.prototype = a;
    a.Parser = c;
    return new c();
}();

if (typeof require !== "undefined" && typeof exports !== "undefined") {
    exports.parser = handlebars;
    exports.Parser = handlebars.Parser;
    exports.parse = function() {
        return handlebars.parse.apply(handlebars, arguments);
    };
    exports.main = function a(b) {
        if (!b[1]) throw new Error("Usage: " + b[0] + " FILE");
        var c, d;
        if (typeof process !== "undefined") {
            c = require("fs").readFileSync(require("path").resolve(b[1]), "utf8");
        } else {
            c = require("file").path(require("file").cwd()).join(b[1]).read({
                charset: "utf-8"
            });
        }
        return exports.parser.parse(c);
    };
    if (typeof module !== "undefined" && require.main === module) {
        exports.main(typeof process !== "undefined" ? process.argv.slice(1) : require("system").args);
    }
}

Handlebars.Parser = handlebars;

Handlebars.parse = function(a) {
    Handlebars.Parser.yy = Handlebars.AST;
    return Handlebars.Parser.parse(a);
};

Handlebars.print = function(a) {
    return new Handlebars.PrintVisitor().accept(a);
};

Handlebars.logger = {
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3,
    level: 3,
    log: function(a, b) {}
};

Handlebars.log = function(a, b) {
    Handlebars.logger.log(a, b);
};

(function() {
    Handlebars.AST = {};
    Handlebars.AST.ProgramNode = function(a, b) {
        this.type = "program";
        this.statements = a;
        if (b) {
            this.inverse = new Handlebars.AST.ProgramNode(b);
        }
    };
    Handlebars.AST.MustacheNode = function(a, b, c) {
        this.type = "mustache";
        this.escaped = !c;
        this.hash = b;
        var d = this.id = a[0];
        var e = this.params = a.slice(1);
        var f = this.eligibleHelper = d.isSimple;
        this.isHelper = f && (e.length || b);
    };
    Handlebars.AST.PartialNode = function(a, b) {
        this.type = "partial";
        this.id = a;
        this.context = b;
    };
    var a = function(a, b) {
        if (a.original !== b.original) {
            throw new Handlebars.Exception(a.original + " doesn't match " + b.original);
        }
    };
    Handlebars.AST.BlockNode = function(b, c, d, e) {
        a(b.id, e);
        this.type = "block";
        this.mustache = b;
        this.program = c;
        this.inverse = d;
        if (this.inverse && !this.program) {
            this.isInverse = true;
        }
    };
    Handlebars.AST.ContentNode = function(a) {
        this.type = "content";
        this.string = a;
    };
    Handlebars.AST.HashNode = function(a) {
        this.type = "hash";
        this.pairs = a;
    };
    Handlebars.AST.IdNode = function(a) {
        this.type = "ID";
        this.original = a.join(".");
        var b = [], c = 0;
        for (var d = 0, e = a.length; d < e; d++) {
            var f = a[d];
            if (f === "..") {
                c++;
            } else if (f === "." || f === "this") {
                this.isScoped = true;
            } else {
                b.push(f);
            }
        }
        this.parts = b;
        this.string = b.join(".");
        this.depth = c;
        this.isSimple = a.length === 1 && !this.isScoped && c === 0;
    };
    Handlebars.AST.DataNode = function(a) {
        this.type = "DATA";
        this.id = a;
    };
    Handlebars.AST.StringNode = function(a) {
        this.type = "STRING";
        this.string = a;
    };
    Handlebars.AST.IntegerNode = function(a) {
        this.type = "INTEGER";
        this.integer = a;
    };
    Handlebars.AST.BooleanNode = function(a) {
        this.type = "BOOLEAN";
        this.bool = a;
    };
    Handlebars.AST.CommentNode = function(a) {
        this.type = "comment";
        this.comment = a;
    };
})();

Handlebars.Exception = function(a) {
    var b = Error.prototype.constructor.apply(this, arguments);
    for (var c in b) {
        if (b.hasOwnProperty(c)) {
            this[c] = b[c];
        }
    }
    this.message = b.message;
};

Handlebars.Exception.prototype = new Error();

Handlebars.SafeString = function(a) {
    this.string = a;
};

Handlebars.SafeString.prototype.toString = function() {
    return this.string.toString();
};

(function() {
    var a = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
    };
    var b = /[&<>"'`]/g;
    var c = /[&<>"'`]/;
    var d = function(b) {
        return a[b] || "&amp;";
    };
    Handlebars.Utils = {
        escapeExpression: function(a) {
            if (a instanceof Handlebars.SafeString) {
                return a.toString();
            } else if (a == null || a === false) {
                return "";
            }
            if (!c.test(a)) {
                return a;
            }
            return a.replace(b, d);
        },
        isEmpty: function(a) {
            if (typeof a === "undefined") {
                return true;
            } else if (a === null) {
                return true;
            } else if (a === false) {
                return true;
            } else if (Object.prototype.toString.call(a) === "[object Array]" && a.length === 0) {
                return true;
            } else {
                return false;
            }
        }
    };
})();

Handlebars.Compiler = function() {};

Handlebars.JavaScriptCompiler = function() {};

(function(a, b) {
    a.prototype = {
        compiler: a,
        disassemble: function() {
            var a = this.opcodes, b, c = [], d, e;
            for (var f = 0, g = a.length; f < g; f++) {
                b = a[f];
                if (b.opcode === "DECLARE") {
                    c.push("DECLARE " + b.name + "=" + b.value);
                } else {
                    d = [];
                    for (var h = 0; h < b.args.length; h++) {
                        e = b.args[h];
                        if (typeof e === "string") {
                            e = '"' + e.replace("\n", "\\n") + '"';
                        }
                        d.push(e);
                    }
                    c.push(b.opcode + " " + d.join(" "));
                }
            }
            return c.join("\n");
        },
        guid: 0,
        compile: function(a, b) {
            this.children = [];
            this.depths = {
                list: []
            };
            this.options = b;
            var c = this.options.knownHelpers;
            this.options.knownHelpers = {
                helperMissing: true,
                blockHelperMissing: true,
                each: true,
                "if": true,
                unless: true,
                "with": true,
                log: true
            };
            if (c) {
                for (var d in c) {
                    this.options.knownHelpers[d] = c[d];
                }
            }
            return this.program(a);
        },
        accept: function(a) {
            return this[a.type](a);
        },
        program: function(a) {
            var b = a.statements, c;
            this.opcodes = [];
            for (var d = 0, e = b.length; d < e; d++) {
                c = b[d];
                this[c.type](c);
            }
            this.isSimple = e === 1;
            this.depths.list = this.depths.list.sort(function(a, b) {
                return a - b;
            });
            return this;
        },
        compileProgram: function(a) {
            var b = new this.compiler().compile(a, this.options);
            var c = this.guid++, d;
            this.usePartial = this.usePartial || b.usePartial;
            this.children[c] = b;
            for (var e = 0, f = b.depths.list.length; e < f; e++) {
                d = b.depths.list[e];
                if (d < 2) {
                    continue;
                } else {
                    this.addDepth(d - 1);
                }
            }
            return c;
        },
        block: function(a) {
            var b = a.mustache, c = a.program, d = a.inverse;
            if (c) {
                c = this.compileProgram(c);
            }
            if (d) {
                d = this.compileProgram(d);
            }
            var e = this.classifyMustache(b);
            if (e === "helper") {
                this.helperMustache(b, c, d);
            } else if (e === "simple") {
                this.simpleMustache(b);
                this.opcode("pushProgram", c);
                this.opcode("pushProgram", d);
                this.opcode("pushLiteral", "{}");
                this.opcode("blockValue");
            } else {
                this.ambiguousMustache(b, c, d);
                this.opcode("pushProgram", c);
                this.opcode("pushProgram", d);
                this.opcode("pushLiteral", "{}");
                this.opcode("ambiguousBlockValue");
            }
            this.opcode("append");
        },
        hash: function(a) {
            var b = a.pairs, c, d;
            this.opcode("push", "{}");
            for (var e = 0, f = b.length; e < f; e++) {
                c = b[e];
                d = c[1];
                this.accept(d);
                this.opcode("assignToHash", c[0]);
            }
        },
        partial: function(a) {
            var b = a.id;
            this.usePartial = true;
            if (a.context) {
                this.ID(a.context);
            } else {
                this.opcode("push", "depth0");
            }
            this.opcode("invokePartial", b.original);
            this.opcode("append");
        },
        content: function(a) {
            this.opcode("appendContent", a.string);
        },
        mustache: function(a) {
            var b = this.options;
            var c = this.classifyMustache(a);
            if (c === "simple") {
                this.simpleMustache(a);
            } else if (c === "helper") {
                this.helperMustache(a);
            } else {
                this.ambiguousMustache(a);
            }
            if (a.escaped && !b.noEscape) {
                this.opcode("appendEscaped");
            } else {
                this.opcode("append");
            }
        },
        ambiguousMustache: function(a, b, c) {
            var d = a.id, e = d.parts[0];
            this.opcode("getContext", d.depth);
            this.opcode("pushProgram", b);
            this.opcode("pushProgram", c);
            this.opcode("invokeAmbiguous", e);
        },
        simpleMustache: function(a, b, c) {
            var d = a.id;
            if (d.type === "DATA") {
                this.DATA(d);
            } else if (d.parts.length) {
                this.ID(d);
            } else {
                this.addDepth(d.depth);
                this.opcode("getContext", d.depth);
                this.opcode("pushContext");
            }
            this.opcode("resolvePossibleLambda");
        },
        helperMustache: function(a, b, c) {
            var d = this.setupFullMustacheParams(a, b, c), e = a.id.parts[0];
            if (this.options.knownHelpers[e]) {
                this.opcode("invokeKnownHelper", d.length, e);
            } else if (this.knownHelpersOnly) {
                throw new Error("You specified knownHelpersOnly, but used the unknown helper " + e);
            } else {
                this.opcode("invokeHelper", d.length, e);
            }
        },
        ID: function(a) {
            this.addDepth(a.depth);
            this.opcode("getContext", a.depth);
            var b = a.parts[0];
            if (!b) {
                this.opcode("pushContext");
            } else {
                this.opcode("lookupOnContext", a.parts[0]);
            }
            for (var c = 1, d = a.parts.length; c < d; c++) {
                this.opcode("lookup", a.parts[c]);
            }
        },
        DATA: function(a) {
            this.options.data = true;
            this.opcode("lookupData", a.id);
        },
        STRING: function(a) {
            this.opcode("pushString", a.string);
        },
        INTEGER: function(a) {
            this.opcode("pushLiteral", a.integer);
        },
        BOOLEAN: function(a) {
            this.opcode("pushLiteral", a.bool);
        },
        comment: function() {},
        opcode: function(a) {
            this.opcodes.push({
                opcode: a,
                args: [].slice.call(arguments, 1)
            });
        },
        declare: function(a, b) {
            this.opcodes.push({
                opcode: "DECLARE",
                name: a,
                value: b
            });
        },
        addDepth: function(a) {
            if (isNaN(a)) {
                throw new Error("EWOT");
            }
            if (a === 0) {
                return;
            }
            if (!this.depths[a]) {
                this.depths[a] = true;
                this.depths.list.push(a);
            }
        },
        classifyMustache: function(a) {
            var b = a.isHelper;
            var c = a.eligibleHelper;
            var d = this.options;
            if (c && !b) {
                var e = a.id.parts[0];
                if (d.knownHelpers[e]) {
                    b = true;
                } else if (d.knownHelpersOnly) {
                    c = false;
                }
            }
            if (b) {
                return "helper";
            } else if (c) {
                return "ambiguous";
            } else {
                return "simple";
            }
        },
        pushParams: function(a) {
            var b = a.length, c;
            while (b--) {
                c = a[b];
                if (this.options.stringParams) {
                    if (c.depth) {
                        this.addDepth(c.depth);
                    }
                    this.opcode("getContext", c.depth || 0);
                    this.opcode("pushStringParam", c.string);
                } else {
                    this[c.type](c);
                }
            }
        },
        setupMustacheParams: function(a) {
            var b = a.params;
            this.pushParams(b);
            if (a.hash) {
                this.hash(a.hash);
            } else {
                this.opcode("pushLiteral", "{}");
            }
            return b;
        },
        setupFullMustacheParams: function(a, b, c) {
            var d = a.params;
            this.pushParams(d);
            this.opcode("pushProgram", b);
            this.opcode("pushProgram", c);
            if (a.hash) {
                this.hash(a.hash);
            } else {
                this.opcode("pushLiteral", "{}");
            }
            return d;
        }
    };
    var c = function(a) {
        this.value = a;
    };
    b.prototype = {
        nameLookup: function(a, c, d) {
            if (/^[0-9]+$/.test(c)) {
                return a + "[" + c + "]";
            } else if (b.isValidJavaScriptVariableName(c)) {
                return a + "." + c;
            } else {
                return a + "['" + c + "']";
            }
        },
        appendToBuffer: function(a) {
            if (this.environment.isSimple) {
                return "return " + a + ";";
            } else {
                return "buffer += " + a + ";";
            }
        },
        initializeBuffer: function() {
            return this.quotedString("");
        },
        namespace: "Handlebars",
        compile: function(a, b, c, d) {
            this.environment = a;
            this.options = b || {};
            Handlebars.log(Handlebars.logger.DEBUG, this.environment.disassemble() + "\n\n");
            this.name = this.environment.name;
            this.isChild = !!c;
            this.context = c || {
                programs: [],
                aliases: {}
            };
            this.preamble();
            this.stackSlot = 0;
            this.stackVars = [];
            this.registers = {
                list: []
            };
            this.compileStack = [];
            this.compileChildren(a, b);
            var e = a.opcodes, f;
            this.i = 0;
            for (g = e.length; this.i < g; this.i++) {
                f = e[this.i];
                if (f.opcode === "DECLARE") {
                    this[f.name] = f.value;
                } else {
                    this[f.opcode].apply(this, f.args);
                }
            }
            return this.createFunctionContext(d);
        },
        nextOpcode: function() {
            var a = this.environment.opcodes, b = a[this.i + 1];
            return a[this.i + 1];
        },
        eat: function(a) {
            this.i = this.i + 1;
        },
        preamble: function() {
            var a = [];
            if (!this.isChild) {
                var b = this.namespace;
                var c = "helpers = helpers || " + b + ".helpers;";
                if (this.environment.usePartial) {
                    c = c + " partials = partials || " + b + ".partials;";
                }
                if (this.options.data) {
                    c = c + " data = data || {};";
                }
                a.push(c);
            } else {
                a.push("");
            }
            if (!this.environment.isSimple) {
                a.push(", buffer = " + this.initializeBuffer());
            } else {
                a.push("");
            }
            this.lastContext = 0;
            this.source = a;
        },
        createFunctionContext: function(a) {
            var b = this.stackVars.concat(this.registers.list);
            if (b.length > 0) {
                this.source[1] = this.source[1] + ", " + b.join(", ");
            }
            if (!this.isChild) {
                var c = [];
                for (var d in this.context.aliases) {
                    this.source[1] = this.source[1] + ", " + d + "=" + this.context.aliases[d];
                }
            }
            if (this.source[1]) {
                this.source[1] = "var " + this.source[1].substring(2) + ";";
            }
            if (!this.isChild) {
                this.source[1] += "\n" + this.context.programs.join("\n") + "\n";
            }
            if (!this.environment.isSimple) {
                this.source.push("return buffer;");
            }
            var e = this.isChild ? [ "depth0", "data" ] : [ "Handlebars", "depth0", "helpers", "partials", "data" ];
            for (var f = 0, g = this.environment.depths.list.length; f < g; f++) {
                e.push("depth" + this.environment.depths.list[f]);
            }
            if (a) {
                e.push(this.source.join("\n  "));
                return Function.apply(this, e);
            } else {
                var h = "function " + (this.name || "") + "(" + e.join(",") + ") {\n  " + this.source.join("\n  ") + "}";
                Handlebars.log(Handlebars.logger.DEBUG, h + "\n\n");
                return h;
            }
        },
        blockValue: function() {
            this.context.aliases.blockHelperMissing = "helpers.blockHelperMissing";
            var a = [ "depth0" ];
            this.setupParams(0, a);
            this.replaceStack(function(b) {
                a.splice(1, 0, b);
                return b + " = blockHelperMissing.call(" + a.join(", ") + ")";
            });
        },
        ambiguousBlockValue: function() {
            this.context.aliases.blockHelperMissing = "helpers.blockHelperMissing";
            var a = [ "depth0" ];
            this.setupParams(0, a);
            var b = this.topStack();
            a.splice(1, 0, b);
            this.source.push("if (!" + this.lastHelper + ") { " + b + " = blockHelperMissing.call(" + a.join(", ") + "); }");
        },
        appendContent: function(a) {
            this.source.push(this.appendToBuffer(this.quotedString(a)));
        },
        append: function() {
            var a = this.popStack();
            this.source.push("if(" + a + " || " + a + " === 0) { " + this.appendToBuffer(a) + " }");
            if (this.environment.isSimple) {
                this.source.push("else { " + this.appendToBuffer("''") + " }");
            }
        },
        appendEscaped: function() {
            var a = this.nextOpcode(), b = "";
            this.context.aliases.escapeExpression = "this.escapeExpression";
            if (a && a.opcode === "appendContent") {
                b = " + " + this.quotedString(a.args[0]);
                this.eat(a);
            }
            this.source.push(this.appendToBuffer("escapeExpression(" + this.popStack() + ")" + b));
        },
        getContext: function(a) {
            if (this.lastContext !== a) {
                this.lastContext = a;
            }
        },
        lookupOnContext: function(a) {
            this.pushStack(this.nameLookup("depth" + this.lastContext, a, "context"));
        },
        pushContext: function() {
            this.pushStackLiteral("depth" + this.lastContext);
        },
        resolvePossibleLambda: function() {
            this.context.aliases.functionType = '"function"';
            this.replaceStack(function(a) {
                return "typeof " + a + " === functionType ? " + a + "() : " + a;
            });
        },
        lookup: function(a) {
            this.replaceStack(function(b) {
                return b + " == null || " + b + " === false ? " + b + " : " + this.nameLookup(b, a, "context");
            });
        },
        lookupData: function(a) {
            this.pushStack(this.nameLookup("data", a, "data"));
        },
        pushStringParam: function(a) {
            this.pushStackLiteral("depth" + this.lastContext);
            this.pushString(a);
        },
        pushString: function(a) {
            this.pushStackLiteral(this.quotedString(a));
        },
        push: function(a) {
            this.pushStack(a);
        },
        pushLiteral: function(a) {
            this.pushStackLiteral(a);
        },
        pushProgram: function(a) {
            if (a != null) {
                this.pushStackLiteral(this.programExpression(a));
            } else {
                this.pushStackLiteral(null);
            }
        },
        invokeHelper: function(a, b) {
            this.context.aliases.helperMissing = "helpers.helperMissing";
            var c = this.lastHelper = this.setupHelper(a, b);
            this.register("foundHelper", c.name);
            this.pushStack("foundHelper ? foundHelper.call(" + c.callParams + ") " + ": helperMissing.call(" + c.helperMissingParams + ")");
        },
        invokeKnownHelper: function(a, b) {
            var c = this.setupHelper(a, b);
            this.pushStack(c.name + ".call(" + c.callParams + ")");
        },
        invokeAmbiguous: function(a) {
            this.context.aliases.functionType = '"function"';
            this.pushStackLiteral("{}");
            var b = this.setupHelper(0, a);
            var c = this.lastHelper = this.nameLookup("helpers", a, "helper");
            this.register("foundHelper", c);
            var d = this.nameLookup("depth" + this.lastContext, a, "context");
            var e = this.nextStack();
            this.source.push("if (foundHelper) { " + e + " = foundHelper.call(" + b.callParams + "); }");
            this.source.push("else { " + e + " = " + d + "; " + e + " = typeof " + e + " === functionType ? " + e + "() : " + e + "; }");
        },
        invokePartial: function(a) {
            var b = [ this.nameLookup("partials", a, "partial"), "'" + a + "'", this.popStack(), "helpers", "partials" ];
            if (this.options.data) {
                b.push("data");
            }
            this.context.aliases.self = "this";
            this.pushStack("self.invokePartial(" + b.join(", ") + ");");
        },
        assignToHash: function(a) {
            var b = this.popStack();
            var c = this.topStack();
            this.source.push(c + "['" + a + "'] = " + b + ";");
        },
        compiler: b,
        compileChildren: function(a, b) {
            var c = a.children, d, e;
            for (var f = 0, g = c.length; f < g; f++) {
                d = c[f];
                e = new this.compiler();
                this.context.programs.push("");
                var h = this.context.programs.length;
                d.index = h;
                d.name = "program" + h;
                this.context.programs[h] = e.compile(d, b, this.context);
            }
        },
        programExpression: function(a) {
            this.context.aliases.self = "this";
            if (a == null) {
                return "self.noop";
            }
            var b = this.environment.children[a], c = b.depths.list, d;
            var e = [ b.index, b.name, "data" ];
            for (var f = 0, g = c.length; f < g; f++) {
                d = c[f];
                if (d === 1) {
                    e.push("depth0");
                } else {
                    e.push("depth" + (d - 1));
                }
            }
            if (c.length === 0) {
                return "self.program(" + e.join(", ") + ")";
            } else {
                e.shift();
                return "self.programWithDepth(" + e.join(", ") + ")";
            }
        },
        register: function(a, b) {
            this.useRegister(a);
            this.source.push(a + " = " + b + ";");
        },
        useRegister: function(a) {
            if (!this.registers[a]) {
                this.registers[a] = true;
                this.registers.list.push(a);
            }
        },
        pushStackLiteral: function(a) {
            this.compileStack.push(new c(a));
            return a;
        },
        pushStack: function(a) {
            this.source.push(this.incrStack() + " = " + a + ";");
            this.compileStack.push("stack" + this.stackSlot);
            return "stack" + this.stackSlot;
        },
        replaceStack: function(a) {
            var b = a.call(this, this.topStack());
            this.source.push(this.topStack() + " = " + b + ";");
            return "stack" + this.stackSlot;
        },
        nextStack: function(a) {
            var b = this.incrStack();
            this.compileStack.push("stack" + this.stackSlot);
            return b;
        },
        incrStack: function() {
            this.stackSlot++;
            if (this.stackSlot > this.stackVars.length) {
                this.stackVars.push("stack" + this.stackSlot);
            }
            return "stack" + this.stackSlot;
        },
        popStack: function() {
            var a = this.compileStack.pop();
            if (a instanceof c) {
                return a.value;
            } else {
                this.stackSlot--;
                return a;
            }
        },
        topStack: function() {
            var a = this.compileStack[this.compileStack.length - 1];
            if (a instanceof c) {
                return a.value;
            } else {
                return a;
            }
        },
        quotedString: function(a) {
            return '"' + a.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r") + '"';
        },
        setupHelper: function(a, b) {
            var c = [];
            this.setupParams(a, c);
            var d = this.nameLookup("helpers", b, "helper");
            return {
                params: c,
                name: d,
                callParams: [ "depth0" ].concat(c).join(", "),
                helperMissingParams: [ "depth0", this.quotedString(b) ].concat(c).join(", ")
            };
        },
        setupParams: function(a, b) {
            var c = [], d = [], e, f, g;
            c.push("hash:" + this.popStack());
            f = this.popStack();
            g = this.popStack();
            if (g || f) {
                if (!g) {
                    this.context.aliases.self = "this";
                    g = "self.noop";
                }
                if (!f) {
                    this.context.aliases.self = "this";
                    f = "self.noop";
                }
                c.push("inverse:" + f);
                c.push("fn:" + g);
            }
            for (var h = 0; h < a; h++) {
                e = this.popStack();
                b.push(e);
                if (this.options.stringParams) {
                    d.push(this.popStack());
                }
            }
            if (this.options.stringParams) {
                c.push("contexts:[" + d.join(",") + "]");
            }
            if (this.options.data) {
                c.push("data:data");
            }
            b.push("{" + c.join(",") + "}");
            return b.join(", ");
        }
    };
    var d = ("break else new var" + " case finally return void" + " catch for switch while" + " continue function this with" + " default if throw" + " delete in try" + " do instanceof typeof" + " abstract enum int short" + " boolean export interface static" + " byte extends long super" + " char final native synchronized" + " class float package throws" + " const goto private transient" + " debugger implements protected volatile" + " double import public let yield").split(" ");
    var e = b.RESERVED_WORDS = {};
    for (var f = 0, g = d.length; f < g; f++) {
        e[d[f]] = true;
    }
    b.isValidJavaScriptVariableName = function(a) {
        if (!b.RESERVED_WORDS[a] && /^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(a)) {
            return true;
        }
        return false;
    };
})(Handlebars.Compiler, Handlebars.JavaScriptCompiler);

Handlebars.precompile = function(a, b) {
    b = b || {};
    var c = Handlebars.parse(a);
    var d = new Handlebars.Compiler().compile(c, b);
    return new Handlebars.JavaScriptCompiler().compile(d, b);
};

Handlebars.compile = function(a, b) {
    b = b || {};
    var c;
    function d() {
        var c = Handlebars.parse(a);
        var d = new Handlebars.Compiler().compile(c, b);
        var e = new Handlebars.JavaScriptCompiler().compile(d, b, undefined, true);
        return Handlebars.template(e);
    }
    return function(a, b) {
        if (!c) {
            c = d();
        }
        return c.call(this, a, b);
    };
};

Handlebars.VM = {
    template: function(a) {
        var b = {
            escapeExpression: Handlebars.Utils.escapeExpression,
            invokePartial: Handlebars.VM.invokePartial,
            programs: [],
            program: function(a, b, c) {
                var d = this.programs[a];
                if (c) {
                    return Handlebars.VM.program(b, c);
                } else if (d) {
                    return d;
                } else {
                    d = this.programs[a] = Handlebars.VM.program(b);
                    return d;
                }
            },
            programWithDepth: Handlebars.VM.programWithDepth,
            noop: Handlebars.VM.noop
        };
        return function(c, d) {
            d = d || {};
            return a.call(b, Handlebars, c, d.helpers, d.partials, d.data);
        };
    },
    programWithDepth: function(a, b, c) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function(c, e) {
            e = e || {};
            return a.apply(this, [ c, e.data || b ].concat(d));
        };
    },
    program: function(a, b) {
        return function(c, d) {
            d = d || {};
            return a(c, d.data || b);
        };
    },
    noop: function() {
        return "";
    },
    invokePartial: function(a, b, c, d, e, f) {
        var g = {
            helpers: d,
            partials: e,
            data: f
        };
        if (a === undefined) {
            throw new Handlebars.Exception("The partial " + b + " could not be found");
        } else if (a instanceof Function) {
            return a(c, g);
        } else if (!Handlebars.compile) {
            throw new Handlebars.Exception("The partial " + b + " could not be compiled when running in runtime-only mode");
        } else {
            e[b] = Handlebars.compile(a, {
                data: f !== undefined
            });
            return e[b](c, g);
        }
    }
};

Handlebars.template = Handlebars.VM.template;

!function(a, b) {
    if (typeof module != "undefined") module.exports = b(); else if (typeof define == "function" && typeof define.amd == "object") define(b); else this[a] = b();
}("domready", function(a) {
    var b = [], c, d = false, e = document, f = e.documentElement, g = f.doScroll, h = "DOMContentLoaded", i = "addEventListener", j = "onreadystatechange", k = "readyState", l = g ? /^loaded|^c/ : /^loaded|c/, m = l.test(e[k]);
    function n(a) {
        m = 1;
        while (a = b.shift()) a();
    }
    e[i] && e[i](h, c = function() {
        e.removeEventListener(h, c, d);
        n();
    }, d);
    g && e.attachEvent(j, c = function() {
        if (/^c/.test(e[k])) {
            e.detachEvent(j, c);
            n();
        }
    });
    return a = g ? function(c) {
        self != top ? m ? c() : b.push(c) : function() {
            try {
                f.doScroll("left");
            } catch (b) {
                return setTimeout(function() {
                    a(c);
                }, 50);
            }
            c();
        }();
    } : function(a) {
        m ? a() : b.push(a);
    };
});

!function(a, b, c) {
    if (typeof module != "undefined" && module.exports) module.exports = c(); else if (typeof define == "function" && define.amd) define(c); else b[a] = c();
}("reqwest", this, function() {
    var win = window, doc = document, twoHundo = /^20\d$/, byTag = "getElementsByTagName", readyState = "readyState", contentType = "Content-Type", requestedWith = "X-Requested-With", head = doc[byTag]("head")[0], uniqid = 0, callbackPrefix = "reqwest_" + +new Date(), lastValue, xmlHttpRequest = "XMLHttpRequest", noop = function() {}, isArray = typeof Array.isArray == "function" ? Array.isArray : function(a) {
        return a instanceof Array;
    }, defaultHeaders = {
        contentType: "application/x-www-form-urlencoded",
        requestedWith: xmlHttpRequest,
        accept: {
            "*": "text/javascript, text/html, application/xml, text/xml, */*",
            xml: "application/xml, text/xml",
            html: "text/html",
            text: "text/plain",
            json: "application/json, text/javascript",
            js: "application/javascript, text/javascript"
        }
    }, xhr = win[xmlHttpRequest] ? function() {
        return new XMLHttpRequest();
    } : function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
    }, globalSetupOptions = {
        dataFilter: function(a) {
            return a;
        }
    };
    function handleReadyState(a, b, c) {
        return function() {
            if (a._aborted) return c(a.request);
            if (a.request && a.request[readyState] == 4) {
                a.request.onreadystatechange = noop;
                if (twoHundo.test(a.request.status)) b(a.request); else c(a.request);
            }
        };
    }
    function setHeaders(a, b) {
        var c = b.headers || {}, d;
        c.Accept = c.Accept || defaultHeaders.accept[b.type] || defaultHeaders.accept["*"];
        if (!b.crossOrigin && !c[requestedWith]) c[requestedWith] = defaultHeaders.requestedWith;
        if (!c[contentType]) c[contentType] = b.contentType || defaultHeaders.contentType;
        for (d in c) c.hasOwnProperty(d) && a.setRequestHeader(d, c[d]);
    }
    function setCredentials(a, b) {
        if (typeof b.withCredentials !== "undefined" && typeof a.withCredentials !== "undefined") {
            a.withCredentials = !!b.withCredentials;
        }
    }
    function generalCallback(a) {
        lastValue = a;
    }
    function urlappend(a, b) {
        return a + (/\?/.test(a) ? "&" : "?") + b;
    }
    function handleJsonp(a, b, c, d) {
        var e = uniqid++, f = a.jsonpCallback || "callback", g = a.jsonpCallbackName || reqwest.getcallbackPrefix(e), h = new RegExp("((^|\\?|&)" + f + ")=([^&]+)"), i = d.match(h), j = doc.createElement("script"), k = 0, l = navigator.userAgent.indexOf("MSIE 10.0") !== -1;
        if (i) {
            if (i[3] === "?") {
                d = d.replace(h, "$1=" + g);
            } else {
                g = i[3];
            }
        } else {
            d = urlappend(d, f + "=" + g);
        }
        win[g] = generalCallback;
        j.type = "text/javascript";
        j.src = d;
        j.async = true;
        if (typeof j.onreadystatechange !== "undefined" && !l) {
            j.event = "onclick";
            j.htmlFor = j.id = "_reqwest_" + e;
        }
        j.onload = j.onreadystatechange = function() {
            if (j[readyState] && j[readyState] !== "complete" && j[readyState] !== "loaded" || k) {
                return false;
            }
            j.onload = j.onreadystatechange = null;
            j.onclick && j.onclick();
            b(lastValue);
            lastValue = undefined;
            head.removeChild(j);
            k = 1;
        };
        head.appendChild(j);
        return {
            abort: function() {
                j.onload = j.onreadystatechange = null;
                c({}, "Request is aborted: timeout", {});
                lastValue = undefined;
                head.removeChild(j);
                k = 1;
            }
        };
    }
    function getRequest(a, b) {
        var c = this.o, d = (c.method || "GET").toUpperCase(), e = typeof c === "string" ? c : c.url, f = c.processData !== false && c.data && typeof c.data !== "string" ? reqwest.toQueryString(c.data) : c.data || null, g;
        if ((c.type == "jsonp" || d == "GET") && f) {
            e = urlappend(e, f);
            f = null;
        }
        if (c.type == "jsonp") return handleJsonp(c, a, b, e);
        g = xhr();
        g.open(d, e, c.async === false ? false : true);
        setHeaders(g, c);
        setCredentials(g, c);
        g.onreadystatechange = handleReadyState(this, a, b);
        c.before && c.before(g);
        g.send(f);
        return g;
    }
    function Reqwest(a, b) {
        this.o = a;
        this.fn = b;
        init.apply(this, arguments);
    }
    function setType(a) {
        var b = a.match(/\.(json|jsonp|html|xml)(\?|$)/);
        return b ? b[1] : "js";
    }
    function init(o, fn) {
        this.url = typeof o == "string" ? o : o.url;
        this.timeout = null;
        this._fulfilled = false;
        this._fulfillmentHandlers = [];
        this._errorHandlers = [];
        this._completeHandlers = [];
        this._erred = false;
        this._responseArgs = {};
        var self = this, type = o.type || setType(this.url);
        fn = fn || function() {};
        if (o.timeout) {
            this.timeout = setTimeout(function() {
                self.abort();
            }, o.timeout);
        }
        if (o.success) {
            this._fulfillmentHandlers.push(function() {
                o.success.apply(o, arguments);
            });
        }
        if (o.error) {
            this._errorHandlers.push(function() {
                o.error.apply(o, arguments);
            });
        }
        if (o.complete) {
            this._completeHandlers.push(function() {
                o.complete.apply(o, arguments);
            });
        }
        function complete(a) {
            o.timeout && clearTimeout(self.timeout);
            self.timeout = null;
            while (self._completeHandlers.length > 0) {
                self._completeHandlers.shift()(a);
            }
        }
        function success(resp) {
            var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type), r = filteredResponse;
            try {
                resp.responseText = r;
            } catch (e) {}
            if (r) {
                switch (type) {
                  case "json":
                    try {
                        resp = win.JSON ? win.JSON.parse(r) : eval("(" + r + ")");
                    } catch (err) {
                        return error(resp, "Could not parse JSON in response", err);
                    }
                    break;

                  case "js":
                    resp = eval(r);
                    break;

                  case "html":
                    resp = r;
                    break;

                  case "xml":
                    resp = resp.responseXML && resp.responseXML.parseError && resp.responseXML.parseError.errorCode && resp.responseXML.parseError.reason ? null : resp.responseXML;
                    break;
                }
            }
            self._responseArgs.resp = resp;
            self._fulfilled = true;
            fn(resp);
            while (self._fulfillmentHandlers.length > 0) {
                self._fulfillmentHandlers.shift()(resp);
            }
            complete(resp);
        }
        function error(a, b, c) {
            self._responseArgs.resp = a;
            self._responseArgs.msg = b;
            self._responseArgs.t = c;
            self._erred = true;
            while (self._errorHandlers.length > 0) {
                self._errorHandlers.shift()(a, b, c);
            }
            complete(a);
        }
        this.request = getRequest.call(this, success, error);
    }
    Reqwest.prototype = {
        abort: function() {
            this._aborted = true;
            this.request.abort();
        },
        retry: function() {
            init.call(this, this.o, this.fn);
        },
        then: function(a, b) {
            a = a || function() {};
            b = b || function() {};
            if (this._fulfilled) {
                a(this._responseArgs.resp);
            } else if (this._erred) {
                b(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t);
            } else {
                this._fulfillmentHandlers.push(a);
                this._errorHandlers.push(b);
            }
            return this;
        },
        always: function(a) {
            if (this._fulfilled || this._erred) {
                a(this._responseArgs.resp);
            } else {
                this._completeHandlers.push(a);
            }
            return this;
        },
        fail: function(a) {
            if (this._erred) {
                a(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t);
            } else {
                this._errorHandlers.push(a);
            }
            return this;
        }
    };
    function reqwest(a, b) {
        return new Reqwest(a, b);
    }
    function normalize(a) {
        return a ? a.replace(/\r?\n/g, "\r\n") : "";
    }
    function serial(a, b) {
        var c = a.name, d = a.tagName.toLowerCase(), e = function(a) {
            if (a && !a.disabled) b(c, normalize(a.attributes.value && a.attributes.value.specified ? a.value : a.text));
        }, f, g, h, i;
        if (a.disabled || !c) return;
        switch (d) {
          case "input":
            if (!/reset|button|image|file/i.test(a.type)) {
                f = /checkbox/i.test(a.type);
                g = /radio/i.test(a.type);
                h = a.value;
                (!(f || g) || a.checked) && b(c, normalize(f && h === "" ? "on" : h));
            }
            break;

          case "textarea":
            b(c, normalize(a.value));
            break;

          case "select":
            if (a.type.toLowerCase() === "select-one") {
                e(a.selectedIndex >= 0 ? a.options[a.selectedIndex] : null);
            } else {
                for (i = 0; a.length && i < a.length; i++) {
                    a.options[i].selected && e(a.options[i]);
                }
            }
            break;
        }
    }
    function eachFormElement() {
        var a = this, b, c, d = function(b, c) {
            var d, e, f;
            for (d = 0; d < c.length; d++) {
                f = b[byTag](c[d]);
                for (e = 0; e < f.length; e++) serial(f[e], a);
            }
        };
        for (c = 0; c < arguments.length; c++) {
            b = arguments[c];
            if (/input|select|textarea/i.test(b.tagName)) serial(b, a);
            d(b, [ "input", "select", "textarea" ]);
        }
    }
    function serializeQueryString() {
        return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments));
    }
    function serializeHash() {
        var a = {};
        eachFormElement.apply(function(b, c) {
            if (b in a) {
                a[b] && !isArray(a[b]) && (a[b] = [ a[b] ]);
                a[b].push(c);
            } else a[b] = c;
        }, arguments);
        return a;
    }
    reqwest.serializeArray = function() {
        var a = [];
        eachFormElement.apply(function(b, c) {
            a.push({
                name: b,
                value: c
            });
        }, arguments);
        return a;
    };
    reqwest.serialize = function() {
        if (arguments.length === 0) return "";
        var a, b, c = Array.prototype.slice.call(arguments, 0);
        a = c.pop();
        a && a.nodeType && c.push(a) && (a = null);
        a && (a = a.type);
        if (a == "map") b = serializeHash; else if (a == "array") b = reqwest.serializeArray; else b = serializeQueryString;
        return b.apply(null, c);
    };
    reqwest.toQueryString = function(a, b) {
        var c, d, e = b || false, f = [], g = encodeURIComponent, h = function(a, b) {
            b = "function" === typeof b ? b() : b == null ? "" : b;
            f[f.length] = g(a) + "=" + g(b);
        };
        if (isArray(a)) {
            for (d = 0; a && d < a.length; d++) h(a[d].name, a[d].value);
        } else {
            for (c in a) {
                buildParams(c, a[c], e, h);
            }
        }
        return f.join("&").replace(/%20/g, "+");
    };
    function buildParams(a, b, c, d) {
        var e, f, g, h = /\[\]$/;
        if (isArray(b)) {
            for (f = 0; b && f < b.length; f++) {
                g = b[f];
                if (c || h.test(a)) {
                    d(a, g);
                } else {
                    buildParams(a + "[" + (typeof g === "object" ? f : "") + "]", g, c, d);
                }
            }
        } else if (b && b.toString() === "[object Object]") {
            for (e in b) {
                buildParams(a + "[" + e + "]", b[e], c, d);
            }
        } else {
            d(a, b);
        }
    }
    reqwest.getcallbackPrefix = function() {
        return callbackPrefix;
    };
    reqwest.compat = function(a, b) {
        if (a) {
            a.type && (a.method = a.type) && delete a.type;
            a.dataType && (a.type = a.dataType);
            a.jsonpCallback && (a.jsonpCallbackName = a.jsonpCallback) && delete a.jsonpCallback;
            a.jsonp && (a.jsonpCallback = a.jsonp);
        }
        return new Reqwest(a, b);
    };
    reqwest.ajaxSetup = function(a) {
        a = a || {};
        for (var b in a) {
            globalSetupOptions[b] = a[b];
        }
    };
    return reqwest;
});

(function(a) {
    domready(function() {
        a.SiteSetup.init();
    });
    a.SiteSetup = {
        init: function() {
            a.SiteSetup.getData();
        },
        getData: function() {
            reqwest({
                url: "/data.json",
                type: "json",
                success: function(b) {
                    a.data = b;
                    console.log(b);
                    if (window.localStorage) {
                        localStorage.setItem("data", JSON.stringify(b));
                    }
                    a.tpl.listing("home", "#main");
                    console.log("Home page");
                },
                error: function(a) {
                    console.error("error!", a);
                }
            });
        }
    };
    a.tpl = {
        init: function() {
            a.tpl.projectList();
        },
        listing: function(b, c) {
            var d = a.helpers.template(b);
            console.log(c);
            document.querySelector(c).innerHTML = d(a.data);
        }
    };
    a.helpers = {
        template: function(a) {
            var b = document.getElementById(a + "-tpl");
            return Handlebars.compile(b.innerHTML);
        }
    };
})(window.ZANDER = window.ZANDER || {});
//# sourceMappingURL=compileTemplates.min.js.map